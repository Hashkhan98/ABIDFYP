%% Simulate and plot the Tower Crane using MPC and a Nonlinear Model
clear;close all;

%% Declare Constants
Parameters;

simtime = 10; % Length of simulation in seconds
T = 0.01; % 
simstep = [0 T];

time = 0:T:simtime;

%% Trajectory 

maxvel = 0.125;
[qstar,qstardot,qstardotdot,t] = TrajectoryGenerationNEW(maxvel,T); 

time = t; 

q0 = [qstar(:,1);qstardot(:,1)];
u0 = [0 0 0 58.8600]';

% qgoal = [0.3,0.3*m1/m2,90*pi/180,0.4 ,0,0,0,0]';
% q = [r1 r2 theta z]
r1 = q0(1);
r2 = q0(2);
theta = q0(3);
z = q0(4);

dr1 = q0(5);
dr2 = q0(6);
w = q0(7);
dz = q0(8);

F1 = u0(1);
F2 = u0(2);
Tau = u0(3);
% Fz = g*(m1+m2+mbh) +u0(4);
Fz = u0(4);

U = [F1,F2,Tau,Fz]';

%% Define Mass, Coriolis and Gravity Matrix

% q = [r1 r2 theta z dr1 dr2 dtheta dz]
%%Mass Matrix
M = diag([m1 m2  m1*r1^2+m2*r2^2+Ib m1+m2+mbh]); 

%%Coriolis Matrix
C = [0 0 -m1*r1*w 0;
       0 0 -m2*r2*w 0;
       2*m1*r1*w   2*m2*r2*w 0 0;
       0 0 0 0];
%%Gravity Matrix
G = [0;0;0;g*(m1+m2+mbh)];

global param
param.M = M;
param.C = C;
param.G = G;
param.U = U;

param.A = [zeros(4) , eye(4) ; zeros(4,8)];

param.B = [zeros(4,4); diag([1/m1 ; 1/m2 ; 1 ; 1])];

% param.C = [1 1 1 1 1 1 1 1];

param.C =  [1, 0, 0, 0, 0, 0, 0, 0,; %%r1
            0, 1, 0, 0, 0, 0, 0, 0,;%%r2
            0, 0, 1, 0, 0, 0, 0, 0,;%%theta
            0, 0, 0, 1, 0, 0, 0, 0,]; %%z
        
% rank(ctrb(param.A,param.B)) 
% rank(obsv(param.A,param.C))                            

% [K,P,E]=lqr(param.A,param.B,Q,R);  %k=full state feedback gain.....P= solution to algebric ricaati equation....E= Eigrn values

%feedforward gain, may or may not be used
% C = [1,1,1,1,0,0,0,0];
% N_ff = 1\(C/((- A + B * K))* B);


%%
H = 3;

%%pad trajectory
qstar = [qstar,repmat(qstar(:,end),1,H)]; 
qstardot = [qstardot,repmat(qstardot(:,end),1,H)]; 

u = zeros(4,H);
u(:,1) = [0 0 0 58.8600]';
qall = zeros(8,H);
qall(:,1) = q0;

%%
QMPC = diag([2e5 2e5 1e5 1e5 2e1 2e1 1e1 1e1]);    %State Weights matrix
RMPC = diag([1 1 1 1])*0.0001;                     %Control-input Weights matrix
A = [];
b = [];
Aeq = [];
beq = [];
lb = [-10 ,-10 , -10, -10 + 58]';
ub = [10 ,10 ,10 ,10 + 58]';
lbmat = repmat(lb,1,H);
ubmat=repmat(ub,1,H);
nonlin = [];
options = optimoptions('fmincon','Display','off','Algorithm','sqp','MaxFunEvals',3000);
U0 = repamt(4, H);
%%
%% sim
tic
for i = 1:length(time)-1

% U0 = fmincon(@(U) costvel(U,qstar,qstardot,[],qall(:, i),H,simstep,i,[]) ,U0,A,b,Aeq,beq,lbmat,ubmat,nonlin,options);
U0 = fmincon(@(U) costvel(U,[qstar;qstardot],[qall(:, i),qall(:, i),qall(:, i),qall(:, i)],H,simstep,i,QMPC,RMPC) ,U0,A,b,Aeq,beq,lbmat,ubmat,nonlin,options);

u(:,i) = U0(:,1);

qall(:,i+1)= massmatrix(qall(:,i),u(:,i),simstep)';
end
toc
%% plotting
clf;
fig = figure(1);
% left_color = [.1 .1 0];
% right_color = [0 .5 .5];

p([1:3]) =plot(time, qall([1,2,4],:),'LineWidth',3);
ylabel('$\mathbf{Position(m)}$','interpreter','latex')
hold on
plot(time,qstar([1,2,4],1:length(time)),'r--','LineWidth',2);

yyaxis right
ax = gca;
ax.YColor = [20 155 20]/256;
p(4) = plot(time, qall(3,:)*180/pi,'color',[20 155 20]/256,'LineWidth',3);
ylabel('$\mathbf{Position(degrees)}$','interpreter','latex')
p(5) = plot(time,qstar(3,1:length(time))*180/pi,'r--','LineWidth',2);
hold off

legend(p(1:5),{'Actual $r_{1}$','Actual $r_{2}$','Actual $z$','Actual $\theta$','Desired Trajectory'},'interpreter','latex','Location','northeastoutside')
% legend(p([1:4]),'r1','r 2','z','','des r2','des theta','des z','theta')
set(gcf,'color','w')
set(gca,'fontweight','bold','fontsize',22)
xlabel('Time (s)')
xaxis([0 length(time)*T])
title('Position tracking of desired trajectory')

%%

RMSE = sqrt(mean((qall(1,:)' - qstar(1,1:length(time))').^2))
% plot(time,RMSE)
%%
fig = figure(2);
clf;
% left_color = [.1 .1 0];
% right_color = [0 .5 .5];

p([1:3]) =plot(time, qall([5,6,8],:),'LineWidth',3);
ylabel('$\mathbf{Velocity(\frac{m}{s}}$)','interpreter','latex')
hold on
plot(time,qstardot([1,2,4],1:length(time)),'r--','LineWidth',2);

yyaxis right
ax = gca;
ax.YColor = [20 155 20]/256;
p(4) = plot(time, qall(7,:),'color',[20 155 20]/256,'LineWidth',3);
ylabel('$\mathbf{Velocity(\frac{rad}{s}}$)','interpreter','latex')
p(5) = plot(time,qstardot(3,1:length(time)),'r--','LineWidth',2);
hold off

legend(p(1:5),{'Actual $\dot{r_{1}}$','Actual $\dot{r_{2}}$','Actual $\dot{z}$','Actual $\dot{\theta}$','Desired Trajectory'},'interpreter','latex','Location','northeastoutside')
% legend(p([1:4]),'r1','r 2','z','','des r2','des theta','des z','theta')
set(gcf,'color','w')
set(gca,'fontweight','bold','fontsize',22)
xlabel('Time (s)')
xaxis([0 length(time)*T])
title('Velocity tracking of desired trajectory')
%%
%%
fig = figure(3);
clf;
% left_color = [.1 .1 0];
% right_color = [0 .5 .5];
a = [gradient(qall(5,:))',gradient(qall(6,:))',gradient(qall(7,:))',gradient(qall(8,:))']*100;
p([1:3]) =plot(time, a(:,[1,2,4]),'LineWidth',3);
ylabel('$\mathbf{Acceleration(\frac{m}{s^2}})$','interpreter','latex')
hold on
plot(time,qstardotdot([1,2,4],1:length(time)),'r--','LineWidth',2);

yyaxis right
ax = gca;
ax.YColor = [20 155 20]/256;
p(4) = plot(time, a(:,3),'color',[20 155 20]/256,'LineWidth',3);
ylabel('$\mathbf{Acceleration(\frac{degrees}{s^2}})$','interpreter','latex')
p(5) = plot(time,qstardotdot(3,1:length(time)),'r--','LineWidth',2);
hold off

legend(p(1:5),{'Actual $\dot{r_{1}}$','Actual $\dot{r_{2}}$','Actual $\dot{z}$','Actual $\dot{\theta}$','Desired Trajectory'},'interpreter','latex','Location','northeastoutside')
% legend(p([1:4]),'r1','r 2','z','','des r2','des theta','des z','theta')
set(gcf,'color','w')
set(gca,'fontweight','bold','fontsize',22)
xlabel('Time (s)')
xaxis([0 length(time)*T])
title('Acceleration tracking of desired trajectory')

%%
figure(3)
subplot(2,1,1)
plot(time(1:length(time)-1),u(1:3,:))
legend('$F_{r_{1}}$','$F_{r_{2}}$','$F_{\theta}$','$F_{z}$','interpreter','latex','Location','northeastoutside')

xlabel('Time (s)')
xaxis([0 length(time)*T])
ylabel('Torque (N.m)')
set(gcf,'color','w')
set(gca,'fontweight','bold','fontsize',22)

subplot(2,1,2)
plot(time(1:length(time)-1),u(4,:))
legend('$F_{z}$','interpreter','latex','Location','northeastoutside')

set(gcf,'color','w')
set(gca,'fontweight','bold','fontsize',22)
xlabel('Time (s)')
ylabel('Force (N.m)')
xaxis([0 length(time)*T])
yaxis(48,68)
sgtitle('Control Forces required to maintain trajectory','fontweight','bold','fontsize',22)
%%
figure(4)
plot(time,qall(1,:)*m1,'k--',time,-qall(2,:)*m2,'b--',time,repmat(0.42,1,length(time)),'c')
hold on
plot(time,-qall(1,:)*m1 + qall(2,:)*m2 - 0.5 + 0.08,'g-')
legend('Torque m1','Torque m2','Torque Beam','Net Torque')
title('Torques acting on the joint of horizontal beam')
ylabel('Torque (N.m)')
xlabel('Time (s)')

set(gcf,'color','w')
set(gca,'fontweight','bold','fontsize',22)
xaxis([0 length(time)*T])
% (-0.08+0.5+r1)/m2;
%%
%%
[x,y,z] = pol2cart(qall(3,:),qall(1,:),qall(4,:)+0.5);
[xstar,ystar,zstar] = pol2cart(qstar(3,:),qstar(1,:),qstar(4,:)+0.5);
figure(7)
plot3(xstar,ystar,zstar,'r--','LineWidth',2)
hold on
plot3(x,y,z,'b-')
axis([-1 1 -1 1 0 1]);
legend('Desired Trajectory','End effector Trajectory','interpreter','latex','Location','northeastoutside')
xlabel('x (m)')
ylabel('y (m)')
zlabel('z (m)')
set(gcf,'color','w')
set(gca,'fontweight','bold','fontsize',22)
title('Trajectory Tracking of End effector')
% view(0,90)
%%
% for i = 1:10:length(time)
%    plotRobot([qall(1,i),qall(2,i),qall(3,i),qall(4,i)+0.5],i == length(1:10:length(time)));
% end
% legend('a','b','c','Robot','arm ','bleh ','f')